/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 * Instructor: Professor: Dr. Moaath Alrajab
 * Course: CSC 229
 * Date: April 10, 2024
 * Author: Himal Shrestha
 * Homework 09
 * Desc: This class searches for the first triangle number that has over 100 divisors,
 * demonstrating the use of loops and methods to solve mathematical puzzles in Java.
 */
// ToDo 01:  Write an algorithm to solve the following problem
public class Homework09 {

    // Entry point for the program
    public static void main(String[] args) {
        // Sets 'index' at one, tracking the current step in the sequence of adding natural numbers
        int index = 1;
        // Sets the starting point for triangle numbers, beginning with 1
        int triangleNumber = 1;

        // Continuously runs to find the needed triangle number
        while (true) {
            // Checks if the triangle number has exceeded 100 divisors
            if (countDivisors(triangleNumber) > 100) {
                // Outputs the triangle number that has more than 100 divisors
                System.out.println("The first triangle number to have over 100 divisors: " + triangleNumber);
                // Stops the loop after finding the target triangle number
                break;
            }
            // Moves to the next natural number in the sequence
            index++;
            // Calculates the next triangle number in the series
            triangleNumber += index;
        }
    }

    // Calculates the number of divisors for a given number
    private static int countDivisors(int number) {
        // Initializes a counter for the divisors found
        int divisors = 0;
        // Iterates through potential divisors up to the square root of 'number'
        for (int i = 1; i <= Math.sqrt(number); i++) {
            // Checks if 'i' is a divisor of 'number'
            if (number % i == 0) {
                // Special case when 'i' is its own pair (perfect square root)
                if (number / i == i) {
                    // Only counts once for divisors that are their own pairs
                    divisors++;
                } else {
                    // Counts both the divisor and its pair
                    divisors += 2;
                }
            }
        }
        // Returns the total count of divisors for 'number'
        return divisors;
    }
}
   /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?

    */
